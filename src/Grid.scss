/* 
 class grid-container is requiered on container box
 class grid-item is required on every item inside container

 <-- Example of usage -->

 <div class="grid-container spacing-3 jc-center ai-center">
  <div class="grid-item xs-1">Content</div>
  <div class="grid-item xs-5 md-8">Content</div>
  <div class="grid-item xs-1 md-6 lg-12">Content</div>
 </div>
*/

// Define screen sizes for grid layout
$screenSizes: (
  xs: 360,
  sm: 768,
  md: 1024,
  lg: 1366,
);

// Spacing value between grid items
$spacing: 5;

// Rule to define how many columns grid should use
$grid-columns: 12;

// Base container class
.grid-container {
  display: flex;
  flex-wrap: wrap;
  margin: -$spacing + px;
  box-sizing: border-box;
  width: calc(100% + #{$spacing * 2 + px});
}

// Grid Container justify-content options START
.grid-container.jc-start {
  justify-content: flex-start;
}

.grid-container.jc-end {
  justify-content: flex-end;
}

.grid-container.jc-center {
  justify-content: center;
}

.grid-container.jc-between {
  justify-content: space-between;
}

.grid-container.jc-around {
  justify-content: space-around;
}
// END

// Grid Container align-items options START
.grid-container.ai-start {
  align-items: flex-start;
}

.grid-container.ai-end {
  align-items: flex-end;
}

.grid-container.ai-center {
  align-items: center;
}
// END

// Base item class
.grid-item {
  flex-grow: 0;
  max-width: 100%;
  flex-basis: 100%;
  padding: $spacing + px;
  box-sizing: border-box;
}

.grid-container.no-wrap {
  flex-wrap: nowrap;
}

// Loop for defining base grid, based on columns defined above
@each $key, $size in $screenSizes {
  @for $i from 1 through $grid-columns {
    @media (min-width: #{$size}px) {
      .#{$key}-#{$i} {
        flex-grow: 0;
        max-width: 100% / $grid-columns * $i;
        flex-basis: 100% / $grid-columns * $i;
      }
    }
  }
}

// Loop for defining base grid spacing
@for $i from 1 through $grid-columns {
  .grid-container.#{spacing}-#{$i} {
    width: calc(100% + #{$spacing * ($i * 2) + px});
    margin: -($spacing * $i) + px;

    > .grid-item {
      padding: #{$spacing * $i}px;
    }
  }
}
